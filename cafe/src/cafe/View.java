/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cafe;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;

/**
 *
 * @author parasite
 */
public class View extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(View.class.getName());
    private CafeDAO cafeDAO;
    private DefaultTableModel tableModel;

    /**
     * Creates new form View
     */
    public View() {
        initComponents();
        cafeDAO = new CafeDAO();
        initializeData();
        setupEventHandlers();
        setupMenuBar(); // Add menu bar
        loadOrdersTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnLayani = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listMenu = new javax.swing.JList<>();
        comboNomorMeja = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtDetailPesanan = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboPegawai = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        txtPemesan = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        comboMetodePembayaran = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        btnInput = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(245, 240, 230));

        btnLayani.setBackground(new java.awt.Color(183, 198, 139));
        btnLayani.setForeground(new java.awt.Color(0, 0, 0));
        btnLayani.setText("Layani");

        jLabel7.setBackground(new java.awt.Color(153, 153, 153));
        jLabel7.setFont(new java.awt.Font("Grape Nuts", 1, 36)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("<< Nanaz Cafe >>");

        jPanel2.setBackground(new java.awt.Color(212, 180, 131));
        jPanel2.setBorder(new javax.swing.border.MatteBorder(null));

        listMenu.setBackground(new java.awt.Color(255, 255, 255));
        listMenu.setForeground(new java.awt.Color(0, 0, 0));
        listMenu.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(listMenu);

        comboNomorMeja.setBackground(new java.awt.Color(255, 255, 255));
        comboNomorMeja.setForeground(new java.awt.Color(0, 0, 0));

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Adwaita Mono", 0, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(62, 44, 35));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Nomor Meja");

        txtDetailPesanan.setBackground(new java.awt.Color(255, 255, 255));
        txtDetailPesanan.setForeground(new java.awt.Color(0, 0, 0));
        txtDetailPesanan.setText("");
        txtDetailPesanan.setToolTipText("Masukkan catatan khusus untuk pesanan");

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Adwaita Mono", 0, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(62, 44, 35));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Catatan Pesanan");

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Adwaita Mono", 0, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(62, 44, 35));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Menu");

        comboPegawai.setBackground(new java.awt.Color(255, 255, 255));
        comboPegawai.setForeground(new java.awt.Color(0, 0, 0));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Adwaita Mono", 0, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(62, 44, 35));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pegawai");

        txtPemesan.setBackground(new java.awt.Color(255, 255, 255));
        txtPemesan.setForeground(new java.awt.Color(0, 0, 0));
        txtPemesan.setText("");
        txtPemesan.setToolTipText("Masukkan nama pemesan");

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setFont(new java.awt.Font("Adwaita Mono", 0, 13)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(62, 44, 35));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Pemesan");

        comboMetodePembayaran.setBackground(new java.awt.Color(255, 255, 255));
        comboMetodePembayaran.setForeground(new java.awt.Color(0, 0, 0));

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setFont(new java.awt.Font("Adwaita Mono", 0, 13)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(62, 44, 35));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Metode Pembayaran");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboPegawai, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(txtPemesan, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtDetailPesanan, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboNomorMeja, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(comboMetodePembayaran, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPemesan, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboPegawai, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtDetailPesanan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboNomorMeja, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboMetodePembayaran, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        btnInput.setBackground(new java.awt.Color(183, 198, 139));
        btnInput.setForeground(new java.awt.Color(0, 0, 0));
        btnInput.setText("Input");

        jPanel3.setBackground(new java.awt.Color(197, 216, 232));
        jPanel3.setBorder(new javax.swing.border.MatteBorder(null));

        jTable1.setBackground(new java.awt.Color(255, 255, 255));
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setSelectionBackground(new java.awt.Color(153, 153, 255));
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Adwaita Mono", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(62, 44, 35));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Pesanan");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLayani, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInput, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLayani, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new View().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInput;
    private javax.swing.JButton btnLayani;
    private javax.swing.JComboBox<String> comboMetodePembayaran;
    private javax.swing.JComboBox<String> comboNomorMeja;
    private javax.swing.JComboBox<String> comboPegawai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JList<String> listMenu;
    private javax.swing.JTextField txtDetailPesanan;
    private javax.swing.JTextField txtPemesan;
    // End of variables declaration//GEN-END:variables

    /**
     * Initialize data from database
     */
    private void initializeData() {
        try {
            // Test database connection first
            if (!DatabaseConnection.testConnection()) {
                JOptionPane.showMessageDialog(this, 
                    "Tidak dapat terhubung ke database. Pastikan SQL Server sudah berjalan.",
                    "Database Error", JOptionPane.ERROR_MESSAGE);
                System.exit(1);
            }

            // Initialize sample data
            cafeDAO.initializeSampleData();

            // Load employees
            loadEmployees();
            
            // Load menu items
            loadMenuItems();
            
            // Load tables
            loadTables();
            
            // Load payment methods
            loadPaymentMethods();
            
            // Setup table model
            setupTableModel();
            
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Failed to initialize data", e);
            JOptionPane.showMessageDialog(this, 
                "Error initializing application: " + e.getMessage(),
                "Initialization Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Load employees into combo box
     */
    private void loadEmployees() {
        List<String> employees = cafeDAO.getAllEmployees();
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        
        for (String employee : employees) {
            model.addElement(employee);
        }
        
        comboPegawai.setModel(model);
    }

    /**
     * Load menu items into list
     */
    private void loadMenuItems() {
        List<String> menuItems = cafeDAO.getAllMenuItems();
        System.out.println("[LOGGGG] Menu Items: " + menuItems);
        DefaultListModel<String> model = new DefaultListModel<>();
        
        for (String item : menuItems) {
            model.addElement(item);
        }
        
        listMenu.setModel(model);
    }

    /**
     * Load tables into combo box
     */
    private void loadTables() {
        List<String> tables = cafeDAO.getAvailableTables();
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        
        for (String table : tables) {
            model.addElement(table);
        }
        
        comboNomorMeja.setModel(model);
    }

    /**
     * Load payment methods into combo box
     */
    private void loadPaymentMethods() {
        List<String> methods = cafeDAO.getPaymentMethods();
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        
        for (String method : methods) {
            model.addElement(method);
        }
        
        comboMetodePembayaran.setModel(model);
    }

    /**
     * Setup table model for orders
     */
    private void setupTableModel() {
        String[] columnNames = {
            "Pemesan", "Meja", "Menu Items", "Pembayaran", "Total"
        };
        
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make table read-only
            }
        };
        
        jTable1.setModel(tableModel);
        
        // Set column widths
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(120); // Pemesan
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(80);  // Meja
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(250); // Menu Items
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(100); // Pembayaran
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(100); // Total
    }

    /**
     * Setup event handlers for buttons
     */
    private void setupEventHandlers() {
        // Input button handler
        btnInput.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleInputOrder();
            }
        });

        // Layani (Serve) button handler
        btnLayani.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleServeOrder();
            }
        });
    }

    /**
     * Setup menu bar with database operations
     */
    private void setupMenuBar() {
        JMenuBar menuBar = new JMenuBar();
        
        // Database menu
        JMenu databaseMenu = new JMenu("Database");
        
        // Seed data menu item
        JMenuItem seedDataItem = new JMenuItem("Seed Sample Data");
        seedDataItem.addActionListener(e -> handleSeedData());
        
        // Clear data menu item
        JMenuItem clearDataItem = new JMenuItem("Clear All Data");
        clearDataItem.addActionListener(e -> handleClearData());
        
        // Refresh data menu item
        JMenuItem refreshDataItem = new JMenuItem("Refresh Data");
        refreshDataItem.addActionListener(e -> handleRefreshData());
        
        databaseMenu.add(seedDataItem);
        databaseMenu.addSeparator();
        databaseMenu.add(refreshDataItem);
        databaseMenu.addSeparator();
        databaseMenu.add(clearDataItem);
        
        menuBar.add(databaseMenu);
        
        setJMenuBar(menuBar);
    }

    /**
     * Handle seed data action
     */
    private void handleSeedData() {
        int confirm = JOptionPane.showConfirmDialog(this,
            "Ini akan menghapus semua data yang ada dan mengisi dengan data contoh.\n" +
            "Apakah Anda yakin ingin melanjutkan?",
            "Seed Database", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                boolean success = cafeDAO.seedDatabase();
                
                if (success) {
                    JOptionPane.showMessageDialog(this,
                        "Database berhasil diisi dengan data contoh!",
                        "Seed Success", JOptionPane.INFORMATION_MESSAGE);
                    
                    // Refresh all data
                    handleRefreshData();
                } else {
                    JOptionPane.showMessageDialog(this,
                        "Gagal mengisi database dengan data contoh.",
                        "Seed Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                    "Error: " + e.getMessage(),
                    "Seed Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Handle clear data action
     */
    private void handleClearData() {
        int confirm = JOptionPane.showConfirmDialog(this,
            "Ini akan menghapus SEMUA data dari database.\n" +
            "Apakah Anda benar-benar yakin?",
            "Clear Database", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                // Use the CafeDAO to safely clear data
                boolean success = cafeDAO.clearDatabaseSafely();
                
                if (success) {
                    JOptionPane.showMessageDialog(this,
                        "Semua data berhasil dihapus!",
                        "Clear Success", JOptionPane.INFORMATION_MESSAGE);
                    
                    // Refresh all data
                    handleRefreshData();
                } else {
                    JOptionPane.showMessageDialog(this,
                        "Gagal menghapus data.",
                        "Clear Error", JOptionPane.ERROR_MESSAGE);
                }
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                    "Error: " + e.getMessage(),
                    "Clear Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Handle refresh data action
     */
    private void handleRefreshData() {
        try {
            loadEmployees();
            loadMenuItems();
            loadTables();
            loadOrdersTable();
            
            JOptionPane.showMessageDialog(this,
                "Data berhasil di-refresh!",
                "Refresh Success", JOptionPane.INFORMATION_MESSAGE);
                
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Error refreshing data: " + e.getMessage(),
                "Refresh Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Handle input order button click
     */
    private void handleInputOrder() {
        try {
            // Validate input
            if (!validateInput()) {
                return;
            }

            // Get form data
            String customerName = txtPemesan.getText().trim();
            String employeeName = (String) comboPegawai.getSelectedItem();
            String tableInfo = (String) comboNomorMeja.getSelectedItem();
            String orderDetails = txtDetailPesanan.getText().trim();
            String paymentMethod = (String) comboMetodePembayaran.getSelectedItem();

            // Get selected menu items
            List<String> selectedMenuItems = listMenu.getSelectedValuesList();

            // Insert order
            boolean success = cafeDAO.insertOrder(customerName, employeeName, tableInfo, 
                                                 orderDetails, paymentMethod, selectedMenuItems);

            if (success) {
                JOptionPane.showMessageDialog(this, 
                    "Pesanan berhasil ditambahkan!", 
                    "Success", JOptionPane.INFORMATION_MESSAGE);
                
                // Clear form
                clearForm();
                
                // Refresh orders table
                loadOrdersTable();
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Gagal menambahkan pesanan. Silakan coba lagi.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error processing order", e);
            JOptionPane.showMessageDialog(this, 
                "Error: " + e.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Handle serve order button click
     */
    private void handleServeOrder() {
        int selectedRow = jTable1.getSelectedRow();
        
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, 
                "Pilih pesanan yang akan dilayani terlebih dahulu.", 
                "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get order details from selected row (now without ID column)
        String customerName = (String) tableModel.getValueAt(selectedRow, 0); // Pemesan
        String tableInfo = (String) tableModel.getValueAt(selectedRow, 1);    // Meja
        String menuItems = (String) tableModel.getValueAt(selectedRow, 2);    // Menu Items

        // Confirm action
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Apakah Anda yakin ingin melayani pesanan dari " + customerName + " di " + tableInfo + "?", 
            "Confirm Serve Order", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            boolean success = cafeDAO.deleteOrderByDetails(customerName, tableInfo, menuItems);
            
            if (success) {
                JOptionPane.showMessageDialog(this, 
                    "Pesanan berhasil dilayani!", 
                    "Success", JOptionPane.INFORMATION_MESSAGE);
                
                // Refresh orders table
                loadOrdersTable();
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Gagal melayani pesanan. Silakan coba lagi.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Validate form input
     */
    private boolean validateInput() {
        if (txtPemesan.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Nama pemesan harus diisi!", 
                "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtPemesan.requestFocus();
            return false;
        }

        if (comboPegawai.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, 
                "Pilih pegawai terlebih dahulu!", 
                "Validation Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (comboNomorMeja.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, 
                "Pilih nomor meja terlebih dahulu!", 
                "Validation Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (listMenu.getSelectedValuesList().isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Pilih minimal satu menu!", 
                "Validation Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (comboMetodePembayaran.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, 
                "Pilih metode pembayaran terlebih dahulu!", 
                "Validation Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        return true;
    }

    /**
     * Clear form after successful input
     */
    private void clearForm() {
        txtPemesan.setText("");
        txtDetailPesanan.setText("");
        listMenu.clearSelection();
        
        // Reset combo boxes to first item
        if (comboPegawai.getItemCount() > 0) {
            comboPegawai.setSelectedIndex(0);
        }
        if (comboNomorMeja.getItemCount() > 0) {
            comboNomorMeja.setSelectedIndex(0);
        }
        if (comboMetodePembayaran.getItemCount() > 0) {
            comboMetodePembayaran.setSelectedIndex(0);
        }
    }

    /**
     * Load orders into table
     */
    private void loadOrdersTable() {
        Object[][] orders = cafeDAO.getAllOrders();
        
        // Clear existing data
        tableModel.setRowCount(0);
        
        // Add new data
        for (Object[] order : orders) {
            tableModel.addRow(order);
        }
    }
}